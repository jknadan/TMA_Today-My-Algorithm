## 12월 14일 알고리즘



#### 문제

숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다.
단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다.
1. 숫자가 쓰인 카드들이 N X M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열 의 개수를 의미한다.
2. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다.
3. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다.
4. 따라서 처음에 카드를 골라낼 행을 선택할 때, 이후에 해당 행에서 가장 숫자가 낮은 카드를 뽑을 것을 고려하여 최종적으로 가장 높은 숫자의 카드를 뽑을 수 있도록 전략을 세워야 한다.



예를 들어 3 X 3 형태로 카드들이 다음과 같이 놓여 있다고 가정하자.

​	(M열)

3	1	2

4	1	4  (N행)

2	2	2



여기서 카드를 골라낼 행을 고를 때 첫 번째 혹은 두 번째 행을 선택하는 경우, 최종적으로 뽑는 카 드는 1이다. 하지만 세 번째 행을 선택하는 경우 최종적으로 뽑는 카드는 2이다. 따라서 이 예제에 서는 세 번째 행을 선택하여 숫자 2가 쓰여진 카드를 뽑는 것이 정답이다.
카드들이 N X M 형태로 놓여 있을 때, 게임의 룰에 맞게 카드를 뽑는 프로그램을 만드시오.



#### 입력 조건

- 첫째 줄에 숫자 카드들이 놓인 행의 개수 N과 열의 개수 M이 공백을 기준으로 하여 각각 자연수로 주어진다. (1≤ N, M ≤ 100)
- 둘째 줄부터 N개의 줄에 걸쳐 각 카드에 적힌 숫자가 주어진다. 각 숫자는 1 이상 10,000 이하의 자연수이다.

#### 출력 조건

- 첫째 줄에 게임의 룰에 맞게 선택한 카드에 적힌 숫자를 출력한다.



##### 입력 예시 1 

```
3 3
3 1 2
4 1 4
2 2 2
```

##### 출력 예시 1

```
2
```



##### 입력 예시 2

```
2 4
7 3 1 8
3 3 3 4
```



##### 출력 예시 2

```
3
```



---------

### 내가 짠 코드

```python
N, M = map(int, input().split())  # 정수형으로 값 입력 받기, 스페이스바로 값 연속으로 받기

# 2차원 배열 생성(https://dailylifeofdeveloper.tistory.com/132)
arr = []  # 원본 행렬
arr2 = []  # 각 행렬의 가장 작은 수들 모음

# 행렬 중 행 부분 생성
for _ in range(N):
    arr.append(_)
    arr2.append(_)  # 이 부분은 그냥 리스트 생성

# 입력과 동시에 열 부분 생성
for i in range(N):
    arr[i] = list(map(int, input().split()))
    arr2[i] = min(arr[i])  # 각 행의 가장 작은 값들 저장

print(max(arr2))  # arr2의 저장된 값 중 가장 큰 값 출력

```



2차원 배열(행렬)을 만드는 방법을 몰라서 검색해보아서 복붙하였다.

내 생각의 흐름은 

1. 각 행에서 작은 수를 비교한다.
2. 비교된 작은 수끼리 비교하여 가장 큰 수를 찾는다.

이었다. 그래서 각 행을 입력받을 때 바로 min() 함수를 이용해서 가장 작은 수를 찾아서 보관하였고, 행렬 입력이 끝나자마자 보관된 작은 수들 중에서 max()함수를 이용해 가장 큰 수를 찾아내었다.



### 답안

해당 문제에는 답안이 두개 주어지는데(물론 절대적인 정답은 없겠지만), 나같은 경우 파이썬 기초 문법도 제대로 알지 못하는 경우이기에 추가로 익혀야할 부분이 존재했다.



##### 답안 1(min()함수를 이용하는 답안)

```python
# N, W을 공백으로 구분하여 입력받기
n, m = map(int, input().split())
result = 0

# 한 줄씩 입력받아 확인
for i in range(n):
	data = list(map(int, input().split()))
	# 현재 줄에서 '가장 작은 수' 찾기
	min_value = min(data)
	# '가장 작은 수'들 중에서 가장 큰 수 찾기
	result = max(result, min_value)

print(result) # 최종 답안 출력

```





##### 답안 2(2중 for문을 이용하는 답안)

```python
# N, M을 공백으로 구분하여 입력받기
n, m = map(int, input().sp11t())
result= 0

# 한 줄씩 입력받아 확인
for i in range(n):
	data = list(map(int, input().split()))
	# 현재 줄에서 '가장 작은 수' 찾기
	min_value = 10001
	for a in data:
		min value = min(min_value, a)
		# '가장 작은 수'들 중에서 가장 큰 수 찾기
	result = max(result, min_value)

print(result) # 최종 답안 출력
```



이중 내가 생각하기엔 2중 for문은 가급적 지양하는 것이(본능적으로) 좋으니, 첫번째 답안을 이번 모범답안으로 뽑았다. 

가장 핵심적인 내용은 **'가장 작은 수들 중에서 가장 큰 수'** 이다.

핵심 흐름은 다음과 같다.

1.  result 변수를 0으로 둔다(기준 값)
2. 행을 입력받을 때마다 바로 *min_value*변수에 저장한다.
3. 기존 result 변수와 방금 min_value 저장값과 비교해서 누가 가장 큰 수 인지 찾는다
4.  1 2 3 과정을 반복한다.

즉 N개의 행이 존재한다면 총 비교횟수는 N번이 될 것이다. (2개씩 비교)





### 고찰

이번 내 정답과 차이점은 값을 따로 저장하냐 안하냐의 차이인듯 싶다. 따로 저장하면 메모리 낭비도 있기 때문에 정답에 나온 답안이 더 효율적일 거 같다. 문제를 읽고 문제 해결을 위한 아이디어가 떠올렸다면, 그 아이디어에서 가장 큰 중요한 핵심이 무엇인지 파악하는 것이 더 효율적인 코드를 짜는 시작임을 배웠다.